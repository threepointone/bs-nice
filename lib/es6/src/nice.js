// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Char                    from "bs-platform/lib/es6/char.js";
import * as List                    from "bs-platform/lib/es6/list.js";
import * as $$Array                 from "bs-platform/lib/es6/array.js";
import * as Block                   from "bs-platform/lib/es6/block.js";
import * as Curry                   from "bs-platform/lib/es6/curry.js";
import * as Prefix                  from "./prefix.js";
import * as Printf                  from "bs-platform/lib/es6/printf.js";
import * as $$String                from "bs-platform/lib/es6/string.js";
import * as Hashtbl                 from "bs-platform/lib/es6/hashtbl.js";
import * as Caml_int32              from "bs-platform/lib/es6/caml_int32.js";
import * as Pervasives              from "bs-platform/lib/es6/pervasives.js";
import * as Caml_string             from "bs-platform/lib/es6/caml_string.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

function string_of_position(position) {
  switch (position) {
    case 0 : 
        return "absolute";
    case 1 : 
        return "relative";
    case 2 : 
        return "sticky";
    case 3 : 
        return "fixed";
    
  }
}

function string_of_flexDirection(direction) {
  switch (direction) {
    case 0 : 
        return "row";
    case 1 : 
        return "row-reverse";
    case 2 : 
        return "column";
    case 3 : 
        return "column-reverse";
    
  }
}

function prefix_flexDirection(direction) {
  return $$String.concat("", /* :: */[
              Prefix.combine_pairs(/* :: */[
                    "flex-direction",
                    /* :: */[
                      "-webkit-flex-direction",
                      /* :: */[
                        "-ms-flex-direction",
                        /* [] */0
                      ]
                    ]
                  ], /* :: */[
                    string_of_flexDirection(direction),
                    /* [] */0
                  ]),
              /* :: */[
                ";-webkit-box-orient:",
                /* :: */[
                  direction >= 2 ? "vertical" : "horizontal",
                  /* :: */[
                    ";-webkit-box-direction:",
                    /* :: */[
                      direction !== 1 && direction < 3 ? "normal" : "reverse",
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

function string_of_flexWrap(wrap) {
  if (wrap !== 0) {
    return "nowrap";
  } else {
    return "wrap";
  }
}

function string_of_order($$int) {
  return "order:" + Pervasives.string_of_int($$int);
}

function prefix_order($$int) {
  return "order:" + Pervasives.string_of_int($$int) + (";-webkit-box-ordinal-group:" + Pervasives.string_of_int($$int + 1 | 0));
}

function string_of_justifyContent(justify) {
  switch (justify) {
    case 0 : 
        return "flex-start";
    case 1 : 
        return "flex-end";
    case 2 : 
        return "center";
    case 3 : 
        return "space-between";
    case 4 : 
        return "space-around";
    
  }
}

function string_of_alignItems(align) {
  switch (align) {
    case 0 : 
        return "flex-start";
    case 1 : 
        return "flex-end";
    case 2 : 
        return "center";
    case 3 : 
        return "stretch";
    case 4 : 
        return "baseline";
    
  }
}

function string_of_alignSelf(align) {
  switch (align) {
    case 0 : 
        return "auto";
    case 1 : 
        return "flex-start";
    case 2 : 
        return "flex-end";
    case 3 : 
        return "center";
    case 4 : 
        return "stretch";
    case 5 : 
        return "baseline";
    
  }
}

function string_of_alignContent(align) {
  switch (align) {
    case 0 : 
        return "flex-start";
    case 1 : 
        return "flex-end";
    case 2 : 
        return "center";
    case 3 : 
        return "stretch";
    case 4 : 
        return "space-between";
    case 5 : 
        return "space-around";
    
  }
}

function string_of_overflow(overflow) {
  switch (overflow) {
    case 0 : 
        return "visible";
    case 1 : 
        return "hidden";
    case 2 : 
        return "scroll";
    
  }
}

function string_of_display(display) {
  switch (display) {
    case 0 : 
        return "none";
    case 1 : 
        return "flex";
    case 2 : 
        return "block";
    case 3 : 
        return "inline";
    case 4 : 
        return "inline-flex";
    case 5 : 
        return "inline-block";
    case 6 : 
        return "grid";
    
  }
}

function prefix_display(display) {
  if (display !== 1) {
    if (display !== 4) {
      return "display:" + string_of_display(display);
    } else {
      return Prefix.combine_pairs(/* :: */[
                  "display",
                  /* [] */0
                ], /* :: */[
                  "-ms-inline-flexbox",
                  /* :: */[
                    "-webkit-inline-flex",
                    /* :: */[
                      "inline-flex",
                      /* [] */0
                    ]
                  ]
                ]);
    }
  } else {
    return Prefix.combine_pairs(/* :: */[
                "display",
                /* [] */0
              ], /* :: */[
                "-webkit-flex",
                /* :: */[
                  "flex",
                  /* [] */0
                ]
              ]);
  }
}

function string_of_dimension(value) {
  switch (value.tag | 0) {
    case 0 : 
        return Pervasives.string_of_int(value[0]) + "px";
    case 1 : 
        return Curry._1(Printf.sprintf(/* Format */[
                        /* Float */Block.__(8, [
                            /* Float_f */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ]),
                        "%f"
                      ]), value[0]) + "em";
    case 2 : 
        return Curry._1(Printf.sprintf(/* Format */[
                        /* Float */Block.__(8, [
                            /* Float_f */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ]),
                        "%f"
                      ]), value[0]) + "%";
    
  }
}

function string_of_flexBasis(basis) {
  switch (basis) {
    case 0 : 
        return "auto";
    case 1 : 
        return "max-content";
    case 2 : 
        return "min-content";
    case 3 : 
        return "fit-content";
    case 4 : 
        return "content";
    case 5 : 
        return "inherit";
    case 6 : 
        return "initital";
    case 7 : 
        return "unset";
    
  }
}

function string_of_angle(angle) {
  if (angle.tag) {
    return Curry._1(Printf.sprintf(/* Format */[
                    /* Float */Block.__(8, [
                        /* Float_f */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* End_of_format */0
                      ]),
                    "%f"
                  ]), angle[0]) + "rad";
  } else {
    return Curry._1(Printf.sprintf(/* Format */[
                    /* Float */Block.__(8, [
                        /* Float_f */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* End_of_format */0
                      ]),
                    "%f"
                  ]), angle[0]) + "deg";
  }
}

function string_of_transform(transform) {
  switch (transform.tag | 0) {
    case 0 : 
        return "perspective(" + (Curry._1(Printf.sprintf(/* Format */[
                          /* Float */Block.__(8, [
                              /* Float_f */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* End_of_format */0
                            ]),
                          "%f"
                        ]), transform[0]) + ")");
    case 1 : 
        return "rotate(" + (string_of_angle(transform[0]) + ")");
    case 2 : 
        return "rotateX(" + (string_of_angle(transform[0]) + ")");
    case 3 : 
        return "rotateY(" + (string_of_angle(transform[0]) + ")");
    case 4 : 
        return "rotateZ(" + (string_of_angle(transform[0]) + ")");
    case 5 : 
        return "scale(" + (Curry._1(Printf.sprintf(/* Format */[
                          /* Float */Block.__(8, [
                              /* Float_f */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* End_of_format */0
                            ]),
                          "%f"
                        ]), transform[0]) + ")");
    case 6 : 
        return "scaleX(" + (Curry._1(Printf.sprintf(/* Format */[
                          /* Float */Block.__(8, [
                              /* Float_f */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* End_of_format */0
                            ]),
                          "%f"
                        ]), transform[0]) + ")");
    case 7 : 
        return "scaleY(" + (Curry._1(Printf.sprintf(/* Format */[
                          /* Float */Block.__(8, [
                              /* Float_f */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* End_of_format */0
                            ]),
                          "%f"
                        ]), transform[0]) + ")");
    case 8 : 
        return "scaleZ(" + (Curry._1(Printf.sprintf(/* Format */[
                          /* Float */Block.__(8, [
                              /* Float_f */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* End_of_format */0
                            ]),
                          "%f"
                        ]), transform[0]) + ")");
    case 9 : 
        return "translate(" + (Curry._1(Printf.sprintf(/* Format */[
                          /* Float */Block.__(8, [
                              /* Float_f */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* End_of_format */0
                            ]),
                          "%f"
                        ]), transform[0]) + (", " + (Curry._1(Printf.sprintf(/* Format */[
                              /* Float */Block.__(8, [
                                  /* Float_f */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* End_of_format */0
                                ]),
                              "%f"
                            ]), transform[1]) + ")")));
    case 10 : 
        return "translateX(" + (Curry._1(Printf.sprintf(/* Format */[
                          /* Float */Block.__(8, [
                              /* Float_f */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* End_of_format */0
                            ]),
                          "%f"
                        ]), transform[0]) + ")");
    case 11 : 
        return "translateY(" + (Curry._1(Printf.sprintf(/* Format */[
                          /* Float */Block.__(8, [
                              /* Float_f */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* End_of_format */0
                            ]),
                          "%f"
                        ]), transform[0]) + ")");
    case 12 : 
        return "translateZ(" + (Curry._1(Printf.sprintf(/* Format */[
                          /* Float */Block.__(8, [
                              /* Float_f */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* End_of_format */0
                            ]),
                          "%f"
                        ]), transform[0]) + ")");
    case 13 : 
        return "skewX(" + (string_of_angle(transform[0]) + ")");
    case 14 : 
        return "skewY(" + (string_of_angle(transform[0]) + ")");
    
  }
}

function string_of_color(color) {
  if (typeof color === "number") {
    switch (color) {
      case 0 : 
          return "transparent";
      case 1 : 
          return "aliceblue";
      case 2 : 
          return "antiquewhite";
      case 3 : 
          return "aqua";
      case 4 : 
          return "aquamarine";
      case 5 : 
          return "azure";
      case 6 : 
          return "beige";
      case 7 : 
          return "bisque";
      case 8 : 
          return "black";
      case 9 : 
          return "blanchedalmond";
      case 10 : 
          return "blue";
      case 11 : 
          return "blueviolet";
      case 12 : 
          return "brown";
      case 13 : 
          return "burlywood";
      case 14 : 
          return "cadetblue";
      case 15 : 
          return "chartreuse";
      case 16 : 
          return "chocolate";
      case 17 : 
          return "coral";
      case 18 : 
          return "cornflowerblue";
      case 19 : 
          return "cornsilk";
      case 20 : 
          return "crimson";
      case 21 : 
          return "cyan";
      case 22 : 
          return "darkblue";
      case 23 : 
          return "darkcyan";
      case 24 : 
          return "darkgoldenrod";
      case 25 : 
          return "darkgray";
      case 26 : 
          return "darkgreen";
      case 27 : 
          return "darkgrey";
      case 28 : 
          return "darkkhaki";
      case 29 : 
          return "darkmagenta";
      case 30 : 
          return "darkolivegreen";
      case 31 : 
          return "darkorange";
      case 32 : 
          return "darkorchid";
      case 33 : 
          return "darkred";
      case 34 : 
          return "darksalmon";
      case 35 : 
          return "darkseagreen";
      case 36 : 
          return "darkslateblue";
      case 37 : 
          return "darkslategrey";
      case 38 : 
          return "darkturquoise";
      case 39 : 
          return "darkviolet";
      case 40 : 
          return "deeppink";
      case 41 : 
          return "deepskyblue";
      case 42 : 
          return "dimgray";
      case 43 : 
          return "dimgrey";
      case 44 : 
          return "dodgerblue";
      case 45 : 
          return "firebrick";
      case 46 : 
          return "floralwhite";
      case 47 : 
          return "forestgreen";
      case 48 : 
          return "fuchsia";
      case 49 : 
          return "gainsboro";
      case 50 : 
          return "ghostwhite";
      case 51 : 
          return "gold";
      case 52 : 
          return "goldenrod";
      case 53 : 
          return "gray";
      case 54 : 
          return "green";
      case 55 : 
          return "greenyellow";
      case 56 : 
          return "grey";
      case 57 : 
          return "honeydew";
      case 58 : 
          return "hotpink";
      case 59 : 
          return "indianred";
      case 60 : 
          return "indigo";
      case 61 : 
          return "ivory";
      case 62 : 
          return "khaki";
      case 63 : 
          return "lavender";
      case 64 : 
          return "lavenderblush";
      case 65 : 
          return "lawngreen";
      case 66 : 
          return "lemonchiffon";
      case 67 : 
          return "lightblue";
      case 68 : 
          return "lightcoral";
      case 69 : 
          return "lightcyan";
      case 70 : 
          return "lightgoldenrodyellow";
      case 71 : 
          return "lightgray";
      case 72 : 
          return "lightgreen";
      case 73 : 
          return "lightgrey";
      case 74 : 
          return "lightpink";
      case 75 : 
          return "lightsalmon";
      case 76 : 
          return "lightseagreen";
      case 77 : 
          return "lightskyblue";
      case 78 : 
          return "lightslategrey";
      case 79 : 
          return "lightsteelblue";
      case 80 : 
          return "lightyellow";
      case 81 : 
          return "lime";
      case 82 : 
          return "limegreen";
      case 83 : 
          return "linen";
      case 84 : 
          return "magenta";
      case 85 : 
          return "maroon";
      case 86 : 
          return "mediumaquamarine";
      case 87 : 
          return "mediumblue";
      case 88 : 
          return "mediumorchid";
      case 89 : 
          return "mediumpurple";
      case 90 : 
          return "mediumseagreen";
      case 91 : 
          return "mediumslateblue";
      case 92 : 
          return "mediumspringgreen";
      case 93 : 
          return "mediumturquoise";
      case 94 : 
          return "mediumvioletred";
      case 95 : 
          return "midnightblue";
      case 96 : 
          return "mintcream";
      case 97 : 
          return "mistyrose";
      case 98 : 
          return "moccasin";
      case 99 : 
          return "navajowhite";
      case 100 : 
          return "navy";
      case 101 : 
          return "oldlace";
      case 102 : 
          return "olive";
      case 103 : 
          return "olivedrab";
      case 104 : 
          return "orange";
      case 105 : 
          return "orangered";
      case 106 : 
          return "orchid";
      case 107 : 
          return "palegoldenrod";
      case 108 : 
          return "palegreen";
      case 109 : 
          return "paleturquoise";
      case 110 : 
          return "palevioletred";
      case 111 : 
          return "papayawhip";
      case 112 : 
          return "peachpuff";
      case 113 : 
          return "peru";
      case 114 : 
          return "pink";
      case 115 : 
          return "plum";
      case 116 : 
          return "powderblue";
      case 117 : 
          return "purple";
      case 118 : 
          return "rebeccapurple";
      case 119 : 
          return "red";
      case 120 : 
          return "rosybrown";
      case 121 : 
          return "royalblue";
      case 122 : 
          return "saddlebrown";
      case 123 : 
          return "salmon";
      case 124 : 
          return "sandybrown";
      case 125 : 
          return "seagreen";
      case 126 : 
          return "seashell";
      case 127 : 
          return "sienna";
      case 128 : 
          return "silver";
      case 129 : 
          return "skyblue";
      case 130 : 
          return "slateblue";
      case 131 : 
          return "slategray";
      case 132 : 
          return "snow";
      case 133 : 
          return "springgreen";
      case 134 : 
          return "steelblue";
      case 135 : 
          return "tan";
      case 136 : 
          return "teal";
      case 137 : 
          return "thistle";
      case 138 : 
          return "tomato";
      case 139 : 
          return "turquoise";
      case 140 : 
          return "violet";
      case 141 : 
          return "wheat";
      case 142 : 
          return "white";
      case 143 : 
          return "whitesmoke";
      case 144 : 
          return "yellow";
      case 145 : 
          return "yellowgreen";
      
    }
  } else {
    switch (color.tag | 0) {
      case 0 : 
      case 2 : 
          return Pervasives.string_of_int(color[0]) + ("," + (Pervasives.string_of_int(color[1]) + ("," + Pervasives.string_of_int(color[2]))));
      case 1 : 
      case 3 : 
          return Pervasives.string_of_int(color[0]) + ("," + (Pervasives.string_of_int(color[1]) + ("," + (Pervasives.string_of_int(color[2]) + ("," + Curry._1(Printf.sprintf(/* Format */[
                                    /* Float */Block.__(8, [
                                        /* Float_f */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* End_of_format */0
                                      ]),
                                    "%f"
                                  ]), color[3]))))));
      
    }
  }
}

function string_of_fontWeight(weight) {
  switch (weight) {
    case 0 : 
        return "normal";
    case 1 : 
        return "bold";
    case 2 : 
        return "100";
    case 3 : 
        return "200";
    case 4 : 
        return "300";
    case 5 : 
        return "400";
    case 6 : 
        return "500";
    case 7 : 
        return "600";
    case 8 : 
        return "700";
    case 9 : 
        return "800";
    case 10 : 
        return "900";
    
  }
}

function string_of_backfaceVisibilty(backfaceVisibilty) {
  if (backfaceVisibilty !== 0) {
    return "hidden";
  } else {
    return "visible";
  }
}

function string_of_borderStyle(borderStyle) {
  switch (borderStyle) {
    case 0 : 
        return "solid";
    case 1 : 
        return "dotted";
    case 2 : 
        return "dashed";
    
  }
}

function string_of_fontStyle(fontStyle) {
  if (fontStyle !== 0) {
    return "italic";
  } else {
    return "normal";
  }
}

function string_of_fontVariant(fontVariant) {
  switch (fontVariant) {
    case 0 : 
        return "small-caps";
    case 1 : 
        return "old-style-nums";
    case 2 : 
        return "lining-nums";
    case 3 : 
        return "tabular-nums";
    case 4 : 
        return "proportional-nums";
    
  }
}

function string_of_textAlign(textAlign) {
  switch (textAlign) {
    case 0 : 
        return "auto";
    case 1 : 
        return "left";
    case 2 : 
        return "right";
    case 3 : 
        return "center";
    case 4 : 
        return "justify";
    
  }
}

function string_of_textAlignVertical(textAlignVertical) {
  switch (textAlignVertical) {
    case 0 : 
        return "auto";
    case 1 : 
        return "top";
    case 2 : 
        return "bottom";
    case 3 : 
        return "center";
    
  }
}

function string_of_textDecorationLine(textDecorationLine) {
  switch (textDecorationLine) {
    case 0 : 
        return "none";
    case 1 : 
        return "underline";
    case 2 : 
        return "line-through";
    case 3 : 
        return "underline line-through";
    
  }
}

function string_of_textDecorationStyle(textDecorationStyle) {
  switch (textDecorationStyle) {
    case 0 : 
        return "solid";
    case 1 : 
        return "double";
    case 2 : 
        return "dotted";
    case 3 : 
        return "dashed";
    
  }
}

function string_of_writingDirection(writingDirection) {
  switch (writingDirection) {
    case 0 : 
        return "auto";
    case 1 : 
        return "ltr";
    case 2 : 
        return "rtl";
    
  }
}

function string_of_resizeMode(resizeMode) {
  switch (resizeMode) {
    case 0 : 
        return "contain";
    case 1 : 
        return "cover";
    case 2 : 
        return "stretch";
    case 3 : 
        return "center";
    case 4 : 
        return "repeat";
    
  }
}

function string_of_style(style) {
  switch (style.tag | 0) {
    case 0 : 
        return prefix_display(style[0]);
    case 1 : 
        return "width:" + string_of_dimension(style[0]);
    case 2 : 
        return "height:" + string_of_dimension(style[0]);
    case 3 : 
        return "top:" + string_of_dimension(style[0]);
    case 4 : 
        return "bottom:" + string_of_dimension(style[0]);
    case 5 : 
        return "left:" + string_of_dimension(style[0]);
    case 6 : 
        return "right:" + string_of_dimension(style[0]);
    case 7 : 
        return "min-width:" + string_of_dimension(style[0]);
    case 8 : 
        return "max-width:" + string_of_dimension(style[0]);
    case 9 : 
        return "minheight:" + string_of_dimension(style[0]);
    case 10 : 
        return "maxheight:" + string_of_dimension(style[0]);
    case 11 : 
        return "margin:" + string_of_dimension(style[0]);
    case 12 : 
        return "margin-vertical:" + string_of_dimension(style[0]);
    case 13 : 
        return "margin-horizontal:" + string_of_dimension(style[0]);
    case 14 : 
        return "margin-top:" + string_of_dimension(style[0]);
    case 15 : 
        return "margin-bottom:" + string_of_dimension(style[0]);
    case 16 : 
        return "margin-left:" + string_of_dimension(style[0]);
    case 17 : 
        return "margin-right:" + string_of_dimension(style[0]);
    case 18 : 
        return "padding:" + string_of_dimension(style[0]);
    case 19 : 
        return "padding-vertical:" + string_of_dimension(style[0]);
    case 20 : 
        return "padding-horizontal:" + string_of_dimension(style[0]);
    case 21 : 
        return "padding-top:" + string_of_dimension(style[0]);
    case 22 : 
        return "padding-bottom:" + string_of_dimension(style[0]);
    case 23 : 
        return "padding-left:" + string_of_dimension(style[0]);
    case 24 : 
        return "padding-right:" + string_of_dimension(style[0]);
    case 25 : 
        return "border-width:" + string_of_dimension(style[0]);
    case 26 : 
        return "border-top-width:" + string_of_dimension(style[0]);
    case 27 : 
        return "border-bottom-width:" + string_of_dimension(style[0]);
    case 28 : 
        return "border-left-width:" + string_of_dimension(style[0]);
    case 29 : 
        return "border-right-width:" + string_of_dimension(style[0]);
    case 30 : 
        return "position:" + string_of_position(style[0]);
    case 31 : 
        return prefix_flexDirection(style[0]);
    case 32 : 
        return "flex-wrap:" + string_of_flexWrap(style[0]);
    case 33 : 
        return prefix_order(style[0]);
    case 34 : 
        return "justify-content:" + string_of_justifyContent(style[0]);
    case 35 : 
        return "align-items:" + string_of_alignItems(style[0]);
    case 36 : 
        return "align-self:" + string_of_alignSelf(style[0]);
    case 37 : 
        return "align-content:" + string_of_alignContent(style[0]);
    case 38 : 
        return "overflow:" + string_of_overflow(style[0]);
    case 39 : 
        return "overflow-x:" + string_of_overflow(style[0]);
    case 40 : 
        return "overflow-y:" + string_of_overflow(style[0]);
    case 41 : 
        return "flex-grow:" + Pervasives.string_of_int(style[0]);
    case 42 : 
        return "flex-shrink:" + Pervasives.string_of_int(style[0]);
    case 43 : 
        return "flex-basis:" + Pervasives.string_of_int(style[0]);
    case 44 : 
        return "flex-basis:" + string_of_flexBasis(style[0]);
    case 45 : 
        return "shadow-color:" + string_of_color(style[0]);
    case 46 : 
        return "shadow-offset:" + (Pervasives.string_of_int(style[0]) + ("," + Pervasives.string_of_int(style[1])));
    case 47 : 
        return "shadow-opacity:" + Curry._1(Printf.sprintf(/* Format */[
                        /* Float */Block.__(8, [
                            /* Float_f */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ]),
                        "%f"
                      ]), style[0]);
    case 48 : 
        return "shadow-radius:" + Curry._1(Printf.sprintf(/* Format */[
                        /* Float */Block.__(8, [
                            /* Float_f */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ]),
                        "%f"
                      ]), style[0]);
    case 49 : 
        return "transform:" + $$String.concat(",", List.map(string_of_transform, style[0]));
    case 50 : 
        return "backface-visibilty:" + string_of_backfaceVisibilty(style[0]);
    case 51 : 
        return "background-color:" + string_of_color(style[0]);
    case 52 : 
        return "border-color:" + string_of_color(style[0]);
    case 53 : 
        return "border-top-color:" + string_of_color(style[0]);
    case 54 : 
        return "border-bottom-color:" + string_of_color(style[0]);
    case 55 : 
        return "border-left-color:" + string_of_color(style[0]);
    case 56 : 
        return "border-right-color:" + string_of_color(style[0]);
    case 57 : 
        return "border-radius:" + string_of_dimension(style[0]);
    case 58 : 
        return "border-top-right-radius:" + string_of_dimension(style[0]);
    case 59 : 
        return "border-bottom-left-radius:" + string_of_dimension(style[0]);
    case 60 : 
        return "border-bottom-right-radius:" + string_of_dimension(style[0]);
    case 61 : 
        return "border-top-left-radius:" + string_of_dimension(style[0]);
    case 62 : 
        return "border-style:" + string_of_borderStyle(style[0]);
    case 63 : 
        return "opacity:" + Curry._1(Printf.sprintf(/* Format */[
                        /* Float */Block.__(8, [
                            /* Float_f */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ]),
                        "%f"
                      ]), style[0]);
    case 64 : 
        return "elevation:" + Curry._1(Printf.sprintf(/* Format */[
                        /* Float */Block.__(8, [
                            /* Float_f */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ]),
                        "%f"
                      ]), style[0]);
    case 65 : 
        return "color:" + string_of_color(style[0]);
    case 66 : 
        return "font-family:" + style[0];
    case 67 : 
        return "font-size:" + Curry._1(Printf.sprintf(/* Format */[
                        /* Float */Block.__(8, [
                            /* Float_f */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ]),
                        "%f"
                      ]), style[0]);
    case 68 : 
        return "font-style:" + string_of_fontStyle(style[0]);
    case 69 : 
        return "font-weight:" + string_of_fontWeight(style[0]);
    case 70 : 
        return "font-variant:" + string_of_fontVariant(style[0]);
    case 72 : 
        return "text-shadow-radius:" + Curry._1(Printf.sprintf(/* Format */[
                        /* Float */Block.__(8, [
                            /* Float_f */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ]),
                        "%f"
                      ]), style[0]);
    case 73 : 
        return "text-shadow-color:" + string_of_color(style[0]);
    case 74 : 
        return "letter-spacing:" + Curry._1(Printf.sprintf(/* Format */[
                        /* Float */Block.__(8, [
                            /* Float_f */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ]),
                        "%f"
                      ]), style[0]);
    case 75 : 
        return "line-height:" + Curry._1(Printf.sprintf(/* Format */[
                        /* Float */Block.__(8, [
                            /* Float_f */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ]),
                        "%f"
                      ]), style[0]);
    case 76 : 
        return "text-align:" + string_of_textAlign(style[0]);
    case 77 : 
        return "text-align-vertical:" + string_of_textAlignVertical(style[0]);
    case 78 : 
        return "includefontpadding:" + Pervasives.string_of_bool(style[0]);
    case 79 : 
        return "text-decoration-line:" + string_of_textDecorationLine(style[0]);
    case 80 : 
        return "text-decoration-color:" + string_of_color(style[0]);
    case 81 : 
        return "writing-direction:" + string_of_writingDirection(style[0]);
    case 82 : 
        return "resizemode:" + string_of_resizeMode(style[0]);
    case 83 : 
        return "tintcolor:" + string_of_color(style[0]);
    case 84 : 
        return "overlay-color" + string_of_color(style[0]);
    case 88 : 
        return style[0] + (":" + style[1]);
    default:
      throw Caml_builtin_exceptions.not_found;
  }
}

var splitSelector = (
    function(selector) {
      if(selector.indexOf(',') === -1) {
        return [selector]
      }

      var indices = [], res = [], inParen = 0, o
      /*eslint-disable no-cond-assign*/
      while (o = selectorTokenizer.exec(selector)) {
      /*eslint-enable no-cond-assign*/
        switch (o[0]) {
        case '(': inParen++; break
        case ')': inParen--; break
        case ',': if (inParen) break; indices.push(o.index)
        }
      }
      for (o = indices.length; o--;){
        res.unshift(selector.slice(indices[o] + 1))
        selector = selector.slice(0, indices[o])
      }
      res.unshift(selector)
      return res
    }
    );

var replace = (
  function(src, _with){
    return src.replace(/\&/g, _with);
  }
  );

function join_selectors(a, b) {
  var ax = $$Array.to_list($$Array.map((function (a) {
              var match = $$String.contains(a, /* "&" */38);
              if (match !== 0) {
                return a;
              } else {
                return "&" + a;
              }
            }), Curry._1(splitSelector, a)));
  var bx = $$Array.to_list($$Array.map((function (b) {
              var match = $$String.contains(b, /* "&" */38);
              if (match !== 0) {
                return b;
              } else {
                return "&" + b;
              }
            }), Curry._1(splitSelector, b)));
  return $$String.concat(",", List.fold_left((function (arr, b) {
                    return List.concat(/* :: */[
                                arr,
                                /* :: */[
                                  List.map((function (a) {
                                          return Curry._2(replace, b, a);
                                        }), ax),
                                  /* [] */0
                                ]
                              ]);
                  }), /* [] */0, bx));
}

function string_of_scope(scope, hash, content) {
  var prefix = "";
  var suffix = "";
  if (List.length(scope[/* mqs */0]) > 0) {
    prefix = "@media " + ($$String.concat(" and ", scope[/* mqs */0]) + "{");
    suffix = suffix + "}";
  }
  if (List.length(scope[/* supps */1]) > 0) {
    suffix = suffix + "}";
    prefix = prefix + ("@supports " + ($$String.concat(" and ", scope[/* supps */1]) + "{"));
  }
  if (List.length(scope[/* selectors */2]) > 0) {
    prefix = prefix + Curry._2(replace, List.fold_left(join_selectors, "", scope[/* selectors */2]), hash);
  }
  prefix = prefix + "{";
  suffix = suffix + "}";
  return prefix + (content + suffix);
}

var blankScope = /* record */[
  /* mqs : [] */0,
  /* supps : [] */0,
  /* selectors : :: */[
    "&",
    /* [] */0
  ]
];

function walk(decls, scope) {
  return List.fold_left((function (acc, style) {
                switch (style.tag | 0) {
                  case 85 : 
                      return List.concat(/* :: */[
                                  acc,
                                  /* :: */[
                                    walk(style[1], /* record */[
                                          /* mqs */List.concat(/* :: */[
                                                scope[/* mqs */0],
                                                /* :: */[
                                                  /* :: */[
                                                    style[0],
                                                    /* [] */0
                                                  ],
                                                  /* [] */0
                                                ]
                                              ]),
                                          /* supps */scope[/* supps */1],
                                          /* selectors */scope[/* selectors */2]
                                        ]),
                                    /* [] */0
                                  ]
                                ]);
                  case 86 : 
                      return List.concat(/* :: */[
                                  acc,
                                  /* :: */[
                                    walk(style[1], /* record */[
                                          /* mqs */scope[/* mqs */0],
                                          /* supps */List.concat(/* :: */[
                                                scope[/* supps */1],
                                                /* :: */[
                                                  /* :: */[
                                                    style[0],
                                                    /* [] */0
                                                  ],
                                                  /* [] */0
                                                ]
                                              ]),
                                          /* selectors */scope[/* selectors */2]
                                        ]),
                                    /* [] */0
                                  ]
                                ]);
                  case 87 : 
                      return List.concat(/* :: */[
                                  acc,
                                  /* :: */[
                                    walk(style[1], /* record */[
                                          /* mqs */scope[/* mqs */0],
                                          /* supps */scope[/* supps */1],
                                          /* selectors */List.concat(/* :: */[
                                                scope[/* selectors */2],
                                                /* :: */[
                                                  /* :: */[
                                                    style[0],
                                                    /* [] */0
                                                  ],
                                                  /* [] */0
                                                ]
                                              ])
                                        ]),
                                    /* [] */0
                                  ]
                                ]);
                  default:
                    return List.concat(/* :: */[
                                acc,
                                /* :: */[
                                  /* :: */[
                                    /* tuple */[
                                      scope,
                                      style
                                    ],
                                    /* [] */0
                                  ],
                                  /* [] */0
                                ]
                              ]);
                }
              }), /* [] */0, decls);
}

function group(normalized) {
  var match = List.fold_left((function (param, param$1) {
          var style = param$1[1];
          var scope = param$1[0];
          var styles = param[2];
          var lastScope = param[1];
          var rest = param[0];
          var match = +(lastScope === scope);
          if (match !== 0) {
            return /* tuple */[
                    rest,
                    scope,
                    List.concat(/* :: */[
                          styles,
                          /* :: */[
                            /* :: */[
                              style,
                              /* [] */0
                            ],
                            /* [] */0
                          ]
                        ])
                  ];
          } else {
            return /* tuple */[
                    List.concat(/* :: */[
                          rest,
                          /* :: */[
                            /* :: */[
                              /* tuple */[
                                lastScope,
                                styles
                              ],
                              /* [] */0
                            ],
                            /* [] */0
                          ]
                        ]),
                    scope,
                    /* :: */[
                      style,
                      /* [] */0
                    ]
                  ];
          }
        }), /* tuple */[
        /* [] */0,
        blankScope,
        /* [] */0
      ], normalized);
  return List.concat(/* :: */[
              match[0],
              /* :: */[
                /* :: */[
                  /* tuple */[
                    match[1],
                    match[2]
                  ],
                  /* [] */0
                ],
                /* [] */0
              ]
            ]);
}

function flatten(decls) {
  return group(walk(decls, blankScope));
}

var injected = Hashtbl.create(/* None */0, 100);

var insertRule = (function(rule){
      var tag = document.querySelector('style[data-nice]');
      if(!tag){
        tag = document.createElement('style');
        tag.setAttribute('data-nice', '');
        document.head.appendChild(tag);
      }
      if(process.env.NODE_ENV === 'production'){
        tag.sheet.insertRule(rule, tag.sheet.cssRules.length);
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
    });

function base62_of_int($$int) {
  var fn = function (n, c) {
    if (n !== 0) {
      return fn(n / 62 | 0, Char.escaped(Caml_string.get("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", n - Caml_int32.imul(62, n / 62 | 0) | 0))) + c;
    } else {
      return c;
    }
  };
  return fn(Pervasives.abs($$int), "");
}

function insert(nodes, hash) {
  if (Hashtbl.mem(injected, nodes)) {
    return 0;
  } else {
    var cssRules = List.map((function (param) {
            return string_of_scope(param[0], hash, $$String.concat(";", List.map(string_of_style, param[1])));
          }), List.filter((function (param) {
                  return +(param[1] !== /* [] */0);
                }))(nodes));
    List.map(insertRule, cssRules);
    return Hashtbl.add(injected, nodes, /* true */1);
  }
}

function css(decls) {
  var flattened = group(walk(decls, blankScope));
  var className = "css-" + base62_of_int(Hashtbl.hash(flattened));
  insert(flattened, "." + className);
  return className;
}

function $$global(select, decls) {
  var flattened = group(walk(decls, blankScope));
  insert(flattened, select);
  return /* () */0;
}

function keyframes() {
  return /* () */0;
}

function animation() {
  return /* () */0;
}

function fontFace() {
  return /* () */0;
}

function rehydrate() {
  return /* () */0;
}

function extract() {
  return /* [] */0;
}

var Presets = /* module */[
  /* mobile */"(min-width:400px)",
  /* phablet */"(min-width:550px)",
  /* tablet */"(min-width:750px)",
  /* desktop */"(min-width:1000px)",
  /* hd */"(min-width:1200px)"
];

export {
  string_of_position            ,
  string_of_flexDirection       ,
  prefix_flexDirection          ,
  string_of_flexWrap            ,
  string_of_order               ,
  prefix_order                  ,
  string_of_justifyContent      ,
  string_of_alignItems          ,
  string_of_alignSelf           ,
  string_of_alignContent        ,
  string_of_overflow            ,
  string_of_display             ,
  prefix_display                ,
  string_of_dimension           ,
  string_of_flexBasis           ,
  string_of_angle               ,
  string_of_transform           ,
  string_of_color               ,
  string_of_fontWeight          ,
  string_of_backfaceVisibilty   ,
  string_of_borderStyle         ,
  string_of_fontStyle           ,
  string_of_fontVariant         ,
  string_of_textAlign           ,
  string_of_textAlignVertical   ,
  string_of_textDecorationLine  ,
  string_of_textDecorationStyle ,
  string_of_writingDirection    ,
  string_of_resizeMode          ,
  string_of_style               ,
  splitSelector                 ,
  replace                       ,
  join_selectors                ,
  string_of_scope               ,
  blankScope                    ,
  walk                          ,
  group                         ,
  flatten                       ,
  injected                      ,
  insertRule                    ,
  base62_of_int                 ,
  insert                        ,
  css                           ,
  $$global                      ,
  keyframes                     ,
  animation                     ,
  fontFace                      ,
  rehydrate                     ,
  extract                       ,
  Presets                       ,
  
}
/* splitSelector Not a pure module */
